{"version":3,"sources":["Backdrop.tsx"],"names":["React","useEffect","useState","Modal","Pressable","StyleSheet","ANIMATION_DURATION","IOS_MODAL_SUPPORTED_ORIENTATIONS","Backdrop","children","onPress","visible","delayedVisible","setDelayedVisible","setTimeout","styles","pressable","create","flex"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACEC,KADF,EAIEC,SAJF,EAKEC,UALF,QAMO,cANP;AAOA,SAASC,kBAAT,QAAmC,cAAnC;AAGA;AACA,MAAMC,gCAAqE,GAAG,CAC5E,UAD4E,EAE5E,sBAF4E,EAG5E,WAH4E,EAI5E,gBAJ4E,EAK5E,iBAL4E,CAA9E;AAQA,eAAe,SAASC,QAAT,CAAkB;AAC/BC,EAAAA,QAD+B;AAE/BC,EAAAA,OAF+B;AAG/BC,EAAAA;AAH+B,CAAlB,EAIG;AAChB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCX,QAAQ,CAACS,OAAD,CAApD;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACA;AACA,QAAIU,OAAJ,EAAa;AACXE,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,KAFD,MAEO;AACLC,MAAAA,UAAU,CAAC,MAAMD,iBAAiB,CAAC,KAAD,CAAxB,EAAiCP,kBAAjC,CAAV;AACD;AACF,GAXQ,EAWN,CAACK,OAAD,CAXM,CAAT;AAaA,sBACE,oBAAC,KAAD;AACE,IAAA,OAAO,EAAEC,cADX;AAEE,IAAA,cAAc,EAAEF,OAFlB;AAGE,IAAA,mBAAmB,MAHrB;AAIE,IAAA,WAAW,MAJb;AAKE,IAAA,qBAAqB,EAAEH;AALzB,kBAOE,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAEG,OAApB;AAA6B,IAAA,KAAK,EAAEK,MAAM,CAACC;AAA3C,KACGP,QADH,CAPF,CADF;AAaD;AAED,MAAMM,MAAM,GAAGV,UAAU,CAACY,MAAX,CAAkB;AAC/BD,EAAAA,SAAS,EAAE;AACTE,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Modal,\n  ModalProps,\n  //@ts-ignore\n  Pressable,\n  StyleSheet,\n} from 'react-native';\nimport { ANIMATION_DURATION } from '../constants';\nimport type { BackdropProps } from './Backdrop.d';\n\n// On iOS, Modal orientations need to be manually specified\nconst IOS_MODAL_SUPPORTED_ORIENTATIONS: ModalProps['supportedOrientations'] = [\n  'portrait',\n  'portrait-upside-down',\n  'landscape',\n  'landscape-left',\n  'landscape-right',\n];\n\nexport default function Backdrop({\n  children,\n  onPress,\n  visible,\n}: BackdropProps) {\n  const [delayedVisible, setDelayedVisible] = useState(visible);\n\n  useEffect(() => {\n    // When `Modal.visible` changes, the inner view gets hidden\n    // immediately. This gives no time to `Popover` to animate\n    // when `visible` becomes `false`. By delaying the `visible`\n    // property, it gives extra time for the popover to animate,\n    // then hide the modal\n    if (visible) {\n      setDelayedVisible(true);\n    } else {\n      setTimeout(() => setDelayedVisible(false), ANIMATION_DURATION);\n    }\n  }, [visible]);\n\n  return (\n    <Modal\n      visible={delayedVisible}\n      onRequestClose={onPress}\n      hardwareAccelerated\n      transparent\n      supportedOrientations={IOS_MODAL_SUPPORTED_ORIENTATIONS}\n    >\n      <Pressable onPress={onPress} style={styles.pressable}>\n        {children}\n      </Pressable>\n    </Modal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  pressable: {\n    flex: 1,\n  },\n});\n"]}
{"version":3,"sources":["Popover.tsx"],"names":["React","useEffect","useRef","Animated","StyleSheet","Text","View","Caret","ANIMATION_DURATION","POPOVER_BACKGROUND_COLOR","BORDER_RADIUS","POPOVER_FONT_COLOR","POPOVER_FONT_SIZE","POPOVER_PADDING","POPOVER_WIDTH","Popover","forwardRef","animated","animationType","backgroundColor","caret","withCaret","caretPosition","children","forceInitialAnimation","numberOfLines","visible","position","style","extraProps","ref","isContentString","isHorizontalLayout","prevVisible","opacity","Value","current","animation","toValue","duration","useNativeDriver","start","stop","styles","animationTranslation","translateX","interpolate","inputRange","outputRange","translateY","container","transform","containerHorizontal","content","contentTextOnly","contentText","create","width","overflow","flexDirection","flex","zIndex","borderRadius","padding","color","fontSize","fontWeight","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Animated, StyleSheet, Text, View, ViewProps } from 'react-native';\nimport Caret from './Caret';\nimport { ANIMATION_DURATION } from './constants';\nimport {\n  POPOVER_BACKGROUND_COLOR,\n  BORDER_RADIUS,\n  POPOVER_FONT_COLOR,\n  POPOVER_FONT_SIZE,\n  POPOVER_PADDING,\n  POPOVER_WIDTH,\n} from './style-guide';\n\nexport type PopoverProps = {\n  animated?: boolean;\n  animationType?: 'spring' | 'timing';\n  backgroundColor?: string;\n  caret?: boolean;\n  caretPosition?: 'left' | 'center' | 'right';\n  children: string | React.ReactElement;\n  forceInitialAnimation?: boolean;\n  numberOfLines?: number;\n  visible?: boolean;\n  position?: 'top' | 'right' | 'bottom' | 'left';\n} & ViewProps;\n\nconst Popover = React.forwardRef<View, PopoverProps>(function Popover(\n  {\n    animated = true,\n    animationType = 'timing',\n    backgroundColor,\n    caret: withCaret = true,\n    caretPosition = 'center',\n    children,\n    forceInitialAnimation = false,\n    numberOfLines,\n    visible = true,\n    position = 'bottom',\n    style,\n    ...extraProps\n  },\n  ref\n) {\n  const isContentString = typeof children === 'string';\n  const isHorizontalLayout = position === 'left' || position === 'right';\n  const prevVisible = useRef(visible);\n  const opacity = useRef(\n    new Animated.Value(\n      visible ? (forceInitialAnimation ? 0 : 1) : forceInitialAnimation ? 1 : 0\n    )\n  ).current;\n\n  useEffect(\n    () => {\n      let animation: Animated.CompositeAnimation | undefined;\n\n      if (animated) {\n        if (visible && (!prevVisible.current || forceInitialAnimation)) {\n          animation = Animated[animationType](opacity, {\n            toValue: 1,\n            duration: ANIMATION_DURATION,\n            useNativeDriver: true,\n          });\n        } else if (!visible && (prevVisible.current || forceInitialAnimation)) {\n          animation = Animated[animationType](opacity, {\n            toValue: 0,\n            duration: ANIMATION_DURATION,\n            useNativeDriver: true,\n          });\n        }\n\n        animation?.start();\n      }\n\n      prevVisible.current = visible;\n\n      return () => animation?.stop();\n    },\n    [visible] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  const caret = (\n    <Caret\n      align={caretPosition}\n      position={position}\n      backgroundColor={backgroundColor}\n      style={styles.caret}\n    />\n  );\n\n  let animationTranslation: any;\n\n  if (isHorizontalLayout) {\n    animationTranslation = {\n      translateX: opacity.interpolate({\n        inputRange: [0, 1],\n        outputRange: position === 'left' ? [5, 0] : [-5, 0],\n      }),\n    };\n  } else {\n    animationTranslation = {\n      translateY: opacity.interpolate({\n        inputRange: [0, 1],\n        outputRange: position === 'top' ? [5, 0] : [-5, 0],\n      }),\n    };\n  }\n\n  return (\n    <View\n      ref={ref}\n      style={[styles.container, style]}\n      pointerEvents={visible ? 'auto' : 'none'}\n      {...extraProps}\n    >\n      <Animated.View\n        style={[\n          { opacity, transform: [animationTranslation] },\n          isHorizontalLayout && styles.containerHorizontal,\n        ]}\n      >\n        {withCaret && (position === 'bottom' || position === 'right') && caret}\n\n        <View\n          style={[\n            styles.content,\n            isContentString && styles.contentTextOnly,\n            !!backgroundColor && { backgroundColor },\n          ]}\n        >\n          {isContentString ? (\n            <Text numberOfLines={numberOfLines} style={styles.contentText}>\n              {children}\n            </Text>\n          ) : (\n            children\n          )}\n        </View>\n\n        {withCaret && (position === 'top' || position === 'left') && caret}\n      </Animated.View>\n    </View>\n  );\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    width: POPOVER_WIDTH,\n    overflow: 'hidden',\n  },\n  containerHorizontal: {\n    flexDirection: 'row',\n  },\n  content: {\n    flex: 1,\n    zIndex: 1,\n    backgroundColor: POPOVER_BACKGROUND_COLOR,\n    borderRadius: BORDER_RADIUS * 2,\n    overflow: 'hidden',\n  },\n  contentTextOnly: {\n    padding: POPOVER_PADDING,\n  },\n  contentText: {\n    color: POPOVER_FONT_COLOR,\n    fontSize: POPOVER_FONT_SIZE,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  caret: {\n    zIndex: 0,\n  },\n});\n\nexport default Popover;\n"]}
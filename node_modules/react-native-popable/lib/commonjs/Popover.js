"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Caret = _interopRequireDefault(require("./Caret"));

var _constants = require("./constants");

var _styleGuide = require("./style-guide");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Popover = /*#__PURE__*/_react.default.forwardRef(function Popover({
  animated = true,
  animationType = 'timing',
  backgroundColor,
  caret: withCaret = true,
  caretPosition = 'center',
  children,
  forceInitialAnimation = false,
  numberOfLines,
  visible = true,
  position = 'bottom',
  style,
  ...extraProps
}, ref) {
  const isContentString = typeof children === 'string';
  const isHorizontalLayout = position === 'left' || position === 'right';
  const prevVisible = (0, _react.useRef)(visible);
  const opacity = (0, _react.useRef)(new _reactNative.Animated.Value(visible ? forceInitialAnimation ? 0 : 1 : forceInitialAnimation ? 1 : 0)).current;
  (0, _react.useEffect)(() => {
    let animation;

    if (animated) {
      var _animation;

      if (visible && (!prevVisible.current || forceInitialAnimation)) {
        animation = _reactNative.Animated[animationType](opacity, {
          toValue: 1,
          duration: _constants.ANIMATION_DURATION,
          useNativeDriver: true
        });
      } else if (!visible && (prevVisible.current || forceInitialAnimation)) {
        animation = _reactNative.Animated[animationType](opacity, {
          toValue: 0,
          duration: _constants.ANIMATION_DURATION,
          useNativeDriver: true
        });
      }

      (_animation = animation) === null || _animation === void 0 ? void 0 : _animation.start();
    }

    prevVisible.current = visible;
    return () => {
      var _animation2;

      return (_animation2 = animation) === null || _animation2 === void 0 ? void 0 : _animation2.stop();
    };
  }, [visible] // eslint-disable-line react-hooks/exhaustive-deps
  );

  const caret = /*#__PURE__*/_react.default.createElement(_Caret.default, {
    align: caretPosition,
    position: position,
    backgroundColor: backgroundColor,
    style: styles.caret
  });

  let animationTranslation;

  if (isHorizontalLayout) {
    animationTranslation = {
      translateX: opacity.interpolate({
        inputRange: [0, 1],
        outputRange: position === 'left' ? [5, 0] : [-5, 0]
      })
    };
  } else {
    animationTranslation = {
      translateY: opacity.interpolate({
        inputRange: [0, 1],
        outputRange: position === 'top' ? [5, 0] : [-5, 0]
      })
    };
  }

  return /*#__PURE__*/_react.default.createElement(_reactNative.View, _extends({
    ref: ref,
    style: [styles.container, style],
    pointerEvents: visible ? 'auto' : 'none'
  }, extraProps), /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
    style: [{
      opacity,
      transform: [animationTranslation]
    }, isHorizontalLayout && styles.containerHorizontal]
  }, withCaret && (position === 'bottom' || position === 'right') && caret, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.content, isContentString && styles.contentTextOnly, !!backgroundColor && {
      backgroundColor
    }]
  }, isContentString ? /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    numberOfLines: numberOfLines,
    style: styles.contentText
  }, children) : children), withCaret && (position === 'top' || position === 'left') && caret));
});

const styles = _reactNative.StyleSheet.create({
  container: {
    width: _styleGuide.POPOVER_WIDTH,
    overflow: 'hidden'
  },
  containerHorizontal: {
    flexDirection: 'row'
  },
  content: {
    flex: 1,
    zIndex: 1,
    backgroundColor: _styleGuide.POPOVER_BACKGROUND_COLOR,
    borderRadius: _styleGuide.BORDER_RADIUS * 2,
    overflow: 'hidden'
  },
  contentTextOnly: {
    padding: _styleGuide.POPOVER_PADDING
  },
  contentText: {
    color: _styleGuide.POPOVER_FONT_COLOR,
    fontSize: _styleGuide.POPOVER_FONT_SIZE,
    fontWeight: 'bold',
    textAlign: 'center'
  },
  caret: {
    zIndex: 0
  }
});

var _default = Popover;
exports.default = _default;
//# sourceMappingURL=Popover.js.map
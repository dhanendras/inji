"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Backdrop = _interopRequireDefault(require("./Backdrop"));

var _Popover = _interopRequireDefault(require("./Popover"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const DEFAULT_LAYOUT = {
  width: 0,
  height: 0,
  x: 0,
  y: 0
};
const Popable = /*#__PURE__*/(0, _react.forwardRef)(function Popable({
  action = 'press',
  animated,
  animationType,
  backgroundColor,
  children,
  caret,
  caretPosition,
  content,
  numberOfLines,
  onAction,
  position = 'top',
  strictPosition = false,
  style,
  visible,
  wrapperStyle
}, ref) {
  const dimensions = (0, _reactNative.useWindowDimensions)();
  const [popoverVisible, setPopoverVisible] = (0, _react.useState)(false);
  const [popoverOffset, setPopoverOffset] = (0, _react.useState)({
    left: 0,
    top: 0
  });
  const [popoverLayout, setPopoverLayout] = (0, _react.useState)(DEFAULT_LAYOUT);
  const [popoverPagePosition, setPopoverPagePosition] = (0, _react.useState)({
    left: 0,
    top: 0
  });
  const [childrenLayout, setChildrenLayout] = (0, _react.useState)(DEFAULT_LAYOUT);
  const [computedPosition, setComputedPosition] = (0, _react.useState)(position);
  const isInteractive = typeof visible === 'undefined';
  const isPopoverVisible = isInteractive ? popoverVisible : visible;
  const childrenRef = (0, _react.useRef)(null);
  const popoverRef = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, () => ({
    show: () => setPopoverVisible(true),
    hide: () => setPopoverVisible(false)
  }));
  const handlers = {};

  if (isInteractive) {
    if (action === 'hover' && _reactNative.Platform.OS === 'web') {
      handlers.onHoverIn = () => {
        setPopoverVisible(true);
        onAction === null || onAction === void 0 ? void 0 : onAction(true);
      };

      handlers.onHoverOut = () => {
        setPopoverVisible(false);
        onAction === null || onAction === void 0 ? void 0 : onAction(false);
      };
    } else if (action === 'press' || action === 'hover' && _reactNative.Platform.OS !== 'web') {
      handlers.onPress = () => {
        if (!visible) {
          var _popoverRef$current;

          (_popoverRef$current = popoverRef.current) === null || _popoverRef$current === void 0 ? void 0 : _popoverRef$current.measure((_x, _y, _width, _height, pageX, pageY) => {
            setPopoverPagePosition({
              left: pageX,
              top: pageY
            });
          });
        }

        onAction === null || onAction === void 0 ? void 0 : onAction(!visible);
        setPopoverVisible(!visible);
      };
    } else {
      handlers.onLongPress = () => {
        onAction === null || onAction === void 0 ? void 0 : onAction(!visible);
        setPopoverVisible(!visible);
      };
    }
  }

  const handleHidePopover = (0, _react.useCallback)(() => {
    setPopoverVisible(false);
    onAction === null || onAction === void 0 ? void 0 : onAction(false);
  }, [onAction]);
  const handlePopoverLayout = (0, _react.useCallback)(() => {
    var _popoverRef$current2;

    (_popoverRef$current2 = popoverRef.current) === null || _popoverRef$current2 === void 0 ? void 0 : _popoverRef$current2.measureInWindow((x, y, width, height) => {
      setPopoverLayout({
        x,
        y,
        width,
        height
      });
    });
  }, [popoverRef]);
  const handleChildrenLayout = (0, _react.useCallback)(() => {
    var _childrenRef$current;

    (_childrenRef$current = childrenRef.current) === null || _childrenRef$current === void 0 ? void 0 : _childrenRef$current.measureInWindow((x, y, width, height) => {
      setChildrenLayout({
        x,
        y,
        width,
        height
      });
    });
  }, [childrenRef]);
  (0, _react.useEffect)(() => {
    let nextPosition = position;

    if (!strictPosition) {
      switch (position) {
        case 'left':
          if (popoverLayout.x <= 0) {
            nextPosition = 'right';
          }

          break;

        case 'right':
          if (popoverLayout.x + popoverLayout.width > dimensions.width) {
            nextPosition = 'left';
          }

          break;

        case 'top':
          if (popoverLayout.y <= 0) {
            nextPosition = 'bottom';
          }

          break;

        case 'bottom':
          if (popoverLayout.y + popoverLayout.height >= dimensions.height) {
            nextPosition = 'top';
          }

          break;
      }
    }

    setComputedPosition(nextPosition);
  }, [position, strictPosition, popoverLayout, childrenLayout, dimensions]);
  (0, _react.useEffect)(() => {
    let left = 0;
    let top = 0;

    switch (computedPosition) {
      case 'right':
      case 'left':
        top = (popoverLayout.height - childrenLayout.height) / 2;
        break;

      case 'top':
      case 'bottom':
        left = (popoverLayout.width - childrenLayout.width) / 2;
        break;
    }

    setPopoverOffset({
      left,
      top
    });
  }, [computedPosition, popoverLayout, childrenLayout]);
  const sharedPopoverProps = {
    animated,
    animationType,
    backgroundColor,
    caret,
    caretPosition,
    children: content,
    numberOfLines,
    position: computedPosition
  };
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, wrapperStyle]
  }, /*#__PURE__*/_react.default.createElement(_Backdrop.default, {
    visible: isInteractive && popoverVisible,
    onPress: handleHidePopover,
    popoverRef: popoverRef,
    childrenRef: childrenRef
  }, // Backdrop renders the same popover because:
  // since the backdrop adds a layer on top of the screen to
  // detect any "outside popover press", the inner popover becomes
  // unreachable: the upper layer would keep all the touch events.
  // Because the backdrop uses a modal as a layer, we render that
  // same popover inside the modal, and hide the initial one
  // underneath (which explains why the popover below this one has
  // `visible` set to `false`)
  _reactNative.Platform.OS !== 'web' && /*#__PURE__*/_react.default.createElement(_Popover.default, _extends({}, sharedPopoverProps, {
    forceInitialAnimation: true,
    visible: isPopoverVisible,
    style: [{
      position: 'absolute',
      transform: [{
        translateX: popoverPagePosition.left
      }, {
        translateY: popoverPagePosition.top
      }]
    }, style]
  }))), /*#__PURE__*/_react.default.createElement(_Popover.default, _extends({
    ref: popoverRef
  }, sharedPopoverProps, {
    onLayout: handlePopoverLayout,
    visible: _reactNative.Platform.OS === 'web' ? isPopoverVisible : false,
    style: [computedPosition === 'top' && styles.popoverTop, computedPosition === 'bottom' && styles.popoverBottom, computedPosition === 'left' && {
      alignItems: 'flex-end',
      right: childrenLayout.width
    }, computedPosition === 'right' && {
      left: childrenLayout.width
    }, {
      position: 'absolute',
      transform: [{
        translateX: popoverOffset.left * -1
      }, {
        translateY: popoverOffset.top * -1
      }]
    }, style]
  })), /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, _extends({
    ref: childrenRef,
    onLayout: handleChildrenLayout
  }, handlers), children));
});

const styles = _reactNative.StyleSheet.create({
  container: {
    position: 'relative',
    zIndex: 1
  },
  popoverTop: {
    bottom: '100%'
  },
  popoverBottom: {
    top: '100%'
  }
});

var _default = Popable;
exports.default = _default;
//# sourceMappingURL=Popable.js.map
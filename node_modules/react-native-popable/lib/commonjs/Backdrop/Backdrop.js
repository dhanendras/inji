"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Backdrop;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _constants = require("../constants");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// On iOS, Modal orientations need to be manually specified
const IOS_MODAL_SUPPORTED_ORIENTATIONS = ['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'];

function Backdrop({
  children,
  onPress,
  visible
}) {
  const [delayedVisible, setDelayedVisible] = (0, _react.useState)(visible);
  (0, _react.useEffect)(() => {
    // When `Modal.visible` changes, the inner view gets hidden
    // immediately. This gives no time to `Popover` to animate
    // when `visible` becomes `false`. By delaying the `visible`
    // property, it gives extra time for the popover to animate,
    // then hide the modal
    if (visible) {
      setDelayedVisible(true);
    } else {
      setTimeout(() => setDelayedVisible(false), _constants.ANIMATION_DURATION);
    }
  }, [visible]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.Modal, {
    visible: delayedVisible,
    onRequestClose: onPress,
    hardwareAccelerated: true,
    transparent: true,
    supportedOrientations: IOS_MODAL_SUPPORTED_ORIENTATIONS
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Pressable, {
    onPress: onPress,
    style: styles.pressable
  }, children));
}

const styles = _reactNative.StyleSheet.create({
  pressable: {
    flex: 1
  }
});
//# sourceMappingURL=Backdrop.js.map
{"version":3,"sources":["Backdrop.tsx"],"names":["IOS_MODAL_SUPPORTED_ORIENTATIONS","Backdrop","children","onPress","visible","delayedVisible","setDelayedVisible","setTimeout","ANIMATION_DURATION","styles","pressable","StyleSheet","create","flex"],"mappings":";;;;;;;AAAA;;AACA;;AAOA;;;;;;AAGA;AACA,MAAMA,gCAAqE,GAAG,CAC5E,UAD4E,EAE5E,sBAF4E,EAG5E,WAH4E,EAI5E,gBAJ4E,EAK5E,iBAL4E,CAA9E;;AAQe,SAASC,QAAT,CAAkB;AAC/BC,EAAAA,QAD+B;AAE/BC,EAAAA,OAF+B;AAG/BC,EAAAA;AAH+B,CAAlB,EAIG;AAChB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsC,qBAASF,OAAT,CAA5C;AAEA,wBAAU,MAAM;AACd;AACA;AACA;AACA;AACA;AACA,QAAIA,OAAJ,EAAa;AACXE,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,KAFD,MAEO;AACLC,MAAAA,UAAU,CAAC,MAAMD,iBAAiB,CAAC,KAAD,CAAxB,EAAiCE,6BAAjC,CAAV;AACD;AACF,GAXD,EAWG,CAACJ,OAAD,CAXH;AAaA,sBACE,6BAAC,kBAAD;AACE,IAAA,OAAO,EAAEC,cADX;AAEE,IAAA,cAAc,EAAEF,OAFlB;AAGE,IAAA,mBAAmB,MAHrB;AAIE,IAAA,WAAW,MAJb;AAKE,IAAA,qBAAqB,EAAEH;AALzB,kBAOE,6BAAC,sBAAD;AAAW,IAAA,OAAO,EAAEG,OAApB;AAA6B,IAAA,KAAK,EAAEM,MAAM,CAACC;AAA3C,KACGR,QADH,CAPF,CADF;AAaD;;AAED,MAAMO,MAAM,GAAGE,wBAAWC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Modal,\n  ModalProps,\n  //@ts-ignore\n  Pressable,\n  StyleSheet,\n} from 'react-native';\nimport { ANIMATION_DURATION } from '../constants';\nimport type { BackdropProps } from './Backdrop.d';\n\n// On iOS, Modal orientations need to be manually specified\nconst IOS_MODAL_SUPPORTED_ORIENTATIONS: ModalProps['supportedOrientations'] = [\n  'portrait',\n  'portrait-upside-down',\n  'landscape',\n  'landscape-left',\n  'landscape-right',\n];\n\nexport default function Backdrop({\n  children,\n  onPress,\n  visible,\n}: BackdropProps) {\n  const [delayedVisible, setDelayedVisible] = useState(visible);\n\n  useEffect(() => {\n    // When `Modal.visible` changes, the inner view gets hidden\n    // immediately. This gives no time to `Popover` to animate\n    // when `visible` becomes `false`. By delaying the `visible`\n    // property, it gives extra time for the popover to animate,\n    // then hide the modal\n    if (visible) {\n      setDelayedVisible(true);\n    } else {\n      setTimeout(() => setDelayedVisible(false), ANIMATION_DURATION);\n    }\n  }, [visible]);\n\n  return (\n    <Modal\n      visible={delayedVisible}\n      onRequestClose={onPress}\n      hardwareAccelerated\n      transparent\n      supportedOrientations={IOS_MODAL_SUPPORTED_ORIENTATIONS}\n    >\n      <Pressable onPress={onPress} style={styles.pressable}>\n        {children}\n      </Pressable>\n    </Modal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  pressable: {\n    flex: 1,\n  },\n});\n"]}